1.LLVM philosophy: everything is a library.
Throughout, LLVM emphasizes the philosophy that everything is a library, leaving a relatively small amount of code that is not immediately reusable and is exclusive of a particular tool.
对于LLVM的设计思想的理解。比如LLVM的CommandLine Library。在设计各种tool的时候，在命令行处理这个功能，都是复用的这个库。
2.-###                    Print (but do not run) the commands to run for this compilation
通过这个选项可以看到clang driver 的工作过程。可以看到编译的时候调用了clang -cc1 和 ld
3. "clang" is the driver, "clang -cc1" is the frontend. The driver invokes the frontend with options appropriate for your system.Why not use clang -cc1 directly?
Some clang command line options are driver-only options, some are frontend-only options. Frontend-only options are intended to be used by clang developers.
If you want to use a frontend-only option("a ''-cc1'' option"), for example ''-ast-dump'', then you can run ''clang -Xclang <option>...''to force driver pass ''<option>'' to ''clang -cc1''.
4. Features and Goals of Clang driver?
(1) GCC Compatibility ;(2)Flexible ;(3)Low Overhead;(4)Simple.
5. overview of the entire llvm infrastructure.
(1) compiler driver: clang  2.2G ,carry on the entire compilation.
(2) standalone tools: opt 1.3G, llc 1.2G, and so on.
(3) all tools reuse libraries.
6. interacting with the compiler driver?
(1）the first tool the Clang driver calls is the clang tool itself with the -cc1 parameter,
which disables the compiler-driver mode while enabling the compiler mode.Since LLVM components are libraries,
the clang -cc1 is linked with the IR generation, the code generator for the target macine, and assembler libraries.
Therefore,after parsing, clang -cc1 itselfis able to call other libraries and supervice the compilation pipeline in 
the memory until the object file is ready.
(2) Afterwards, the Clang driver invokes the linker, which is an external tool, to generate the executable file.
