1.Stage Selection options:
Clang:
(1)-E           : Run the preprocessor stage.
(2)-fsyntax-only: Run the preprocessor,parser and type checking stages
(3)-S           : Run the previous stages as well as LLVM generation and optimization stages and target-specific code generation,
                  producing an assembly file.
(4)-c           ：Run all the above, plus the assembler, generationg a target ".o" object file.
(5)             : If no stage selection option, all stage above are run, and the linker is run to combine the results into an executable 
                  or shared library.
GCC:
(1)-E           : Stop after the preprocessing stage; do not run the compiler proper. The output
                  is in the form of preprocessed source code, which is sent to the standard output.
                  Input files that don’t require preprocessing are ignored.
(2)-fsyntax-only  : Check the syntax of the input source code, report any warnings or errors, and stop.       
(3)-S           : Stop after the stage of compilation proper; do not assemble. The output is in
                  the form of an assembler code file for each non-assembler input file specified.
                  By default, the assembler file name for a source file is made by replacing the
                  suffix ‘.c’, ‘.i’, etc., with ‘.s’.
                  Input files that don’t require compilation are ignored.
(4)-c           : Compile or assemble the source files, but do not link. The linking stage simply
                  is not done. The ultimate output is in the form of an object file for each source file.
                  By default, the object file name for a source file is made by replacing the suffix
                  ‘.c’, ‘.i’, ‘.s’, etc., with ‘.o’.
                  Unrecognized input files, not requiring compilation or assembly, are ignored.
(5)             : If no stage selection option, all stage above are run, and the linker is run to combine the results into an executable 
                  or shared library.           
Stage Selection Option Summary:
                              -S is used to generate assembly code. -c is used to generate object code, but not link. 
                              no option is run all the stage.
                              
2.Language Selection and Mode Options
Clang                              
(1) -x           ： Treat subsequent input files as having type language.
    eg: clang -x c++ helloworld.cpp -lstdc++,  clang driver use -x option to compile C++ file.
(2)-std=         : Specify the language standard to compile for.
    eg: clang -x c++ -std=c++11 helloworld.cpp -lstdc++, specify the ISO C++ 2011 with amendments.
(3）-stdlib=     : Specify the C++ standard library to use;supported options are libstdc++ and libc++.If not specified, platform default 
                   will be used.
    note:libc++ is an implementation of the C++ standard library, targeting C++11, C++14 and above.
         http://libcxx.llvm.org/
    eg: clang++ -stdlib=libc++ helloworld.cpp -lc++abi, use the libc++ library.
(4)-rtlib=          : Specify the compiler runtime library to use; supported options are libgcc and compiler-rt.
                      The GNU Compiler Collection uses a special library called libgcc during code generation, 
                      which contains shared code that would be inefficient to duplicate every time 
                      as well as auxiliary helper routines and runtime support.
(5)-ffreestanding   : Indicate that the file should be compiled for a freestanding,not a hosted.
(6)-fno-builtin     : disable special handling and optimization of builtin functions like "strlen" and "malloc".
(7)-fmath-errno     : set errno after calling math functions that are executed with a single instruction.
(8)-fpascal-strings : Enable support for Pascal-style strings with "\\pfoo".
(9)-fms-extensions  : Enable support for Microsoft extensions.
(10)-fmsc-version   : Set _MSC_VER. Defaults to 1300 on Windows. Not set otherwise.
(11)-fborland-extensions: Enable support for Borland extensions.
(12)-fwritable-strings:   Make all string literals default to writable. This disable uniquing of strings and other optimization.
(13)-flax-vector-conversions: Allow loose type checking rules for implicit vector conversions.
(14)-fblocks        :     Enable the "Block" language feature.
(15)-fobjc-abi-version:   Select the Objective-C ABI version to use. 
                          Available versions are 1 (legacy “fragile” ABI), 2 (non-fragile ABI 1), and 3 (non-fragile ABI 2)
                 
GCC
(1)-x           :                          Specify the language of the following input files
                                           Permissible languages include: c c++ assembler none
                                           'none' means revert to the default behavior of
                                            guessing the language based on the file's extension
  eg: gcc -x c++ helloworld.cpp -lstdc++ , gcc driver use -x option compile C++ file.
(2)-std=        :                          Assume that the input sources are for <standard>
   eg: g++ -std=c++11 helloworld.cpp
（3）no -stdlib  :                         gcc has no stdlib option, but according to https://libcxx.llvm.org/docs/UsingLibcxx.html,
                                           gcc also could use libc++ as c++ standard library.
    note:
            g++ -nostdinc++ -I<libcxx-install-prefix>/include/c++/v1 \
                helloworld.cpp -nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc
（4）no -rtlib  ：                         gcc has no -rtlib.                      
（5）-ffreestanding:                      Assert that compilation targets a freestanding environment. This implies
                                         ‘-fno-builtin’. A freestanding environment is one in which the standard
                                          library may not exist, and program startup may not necessarily be at
                                          main. The most obvious example is an OS kernel. This is equivalent to
                                          ‘-fno-hosted’.     
(6)-fno-builtin:                          GCC normally generates special code to handle certain built-in functions more
                                          efficiently; for instance, calls to alloca may become single instructions which
                                          adjust the stack directly, and calls to memcpy may become inline copy loops.
                                          The resulting code is often both smaller and faster, but since the function
                                          calls no longer appear as such, you cannot set a breakpoint on those calls,
                                          nor can you change the behavior of the functions by linking with a different
                                          library. In addition, when a function is recognized as a built-in function, GCC
                                          may use information about that function to warn about problems with calls to
                                          that function, or to generate more efficient code, even if the resulting code still
                                          contains calls to that function.   
(7)-fmath-errno:                          set errno after calling math functions that are executed with a single instruction.
(8)-fms-extensions:                       Accept some non-standard constructs used in Microsoft header files.
                                          In C++ code, this allows member names in structures to be similar to previous
                                          types declarations.
                                          typedef int UOW;
                                          struct ABC {
                                          UOW UOW;
                                          };
                                          Some cases of unnamed fields in structures and unions are only accepted
                                          with this option. See Section 6.63 [Unnamed struct/union fields within
                                          structs/unions], page 809, for details.
                                          Note that this option is off for all targets but x86 targets using ms-abi.
(9)-fwritable-strings:                    GCC no longer accepts the -fwritable-strings option.
                                          Use named character arrays when you need a writable string.
                                          https://www.gnu.org/software/gcc/gcc-4.0/changes.html
(10)-flax-vector-conversions:             Allow implicit conversions between vectors with differing numbers of elements
                                          and/or incompatible element types. This option should not be used for new code.  
(11)-fobjc-abi-version:                   Use version n of the Objective-C ABI for the selected runtime. This option is
                                          currently supported only for the NeXT runtime. In that case, Version 0 is the
                                          traditional (32-bit) ABI without support for properties and other Objective-
                                          C 2.0 additions. Version 1 is the traditional (32-bit) ABI with support for
                                          properties and other Objective-C 2.0 additions. Version 2 is the modern (64-bit)
                                          ABI. If nothing is specified, the default is Version 0 on 32-bit target machines,
                                          and Version 2 on 64-bit target machines.

3.Target Selection Options:
Clang  
(1) -arch:                                Specify the architecture to build for.
(2)-mmacosx:                              When building for Mac OSX, specify the minimum version supported by your application.
(3)-miphoneos-version-min:                When building for iPhone OS, specify the minimum version supported by your application.
(4)-march=                :               Speicify that Clang should generate code for a specific processor family member and later.

Gcc
(1) -arch:                                -arch选项只在Darwin平台有效，，即mac电脑上有用.
                                          (https://blog.csdn.net/listener51/article/details/80468021)
(2)-mmacosx-version-min=version:          The earliest version of MacOS X that this executable will run on is version.
                                          Typical values of version include 10.1, 10.2, and 10.3.9.
                                          If the compiler was built to use the system’s headers by default, then the default
                                          for this option is the system version on which the compiler is running, otherwise
                                          the default is to make choices that are compatible with as many systems and
                                          code bases as possible.
(3)-march=  :                             Generate instructions for the machine type cpu-type.
                                          (https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html#x86-Options)
                                         （https://stackoverflow.com/questions/16273561/gcc-generic-march-for-all-the-x64-platforms）
                                           If the ‘-Q’ option appears on the command line before the ‘--help=’ option, then
                                          the descriptive text displayed by ‘--help=’ is changed. Instead of describing
                                          the displayed options, an indication is given as to whether the option is enabled,
                                          disabled or set to a specific value (assuming that the compiler knows this at the
                                          point where the ‘--help=’ option is used).
                                          根据-Q 选项的作用，我们可以通过-Q选项来看Gcc的默认值。-march 在X86-64上的默认值是X86-64。
                                          如果march=native 就是传入的机器类型，比如haswell.
4. Code Generation Options
Clang
(1)-O0:                                   Means "no optimization": this level compiles the fastest 
                                          and generates the most debuggable code.
(2)-O1:                                   somewhere between option '-O0' and option '-O2'
(3)-O2:                                   Moderate level of optimization which enables most optimizations.
(4)-O3:                                   Like :option '-O2', except that it enables optimizations that take longer to perform 
                                          or that may generate larger code(in an attempt to makethe program run faster).
(5)-Ofast:                                Enabels all the optimizations from '-O3' along with other aggressive optimizations that 
                                          may violate strict compliance with language standards.
(6)-Os:                                   like '-O2' with extra optimization to reduce code size.
(7)-Oz:                                   Like '-Os',but reduces code size further.
(8)-Og:                                   Like '-O1'. In future versions, this option might disable different optimizations 
                                          in order to improve debuggability.
(9)-O:                                    Equivalent to option '-O2'
(10)-O4 and higher:                       Equivalent to -O3.
优化选项的默认值是O0.

Gcc
(1)-O0:                                   Reduce compilation time and make debugging produce the expected results.
                                          This is the default.
(2)-O1:                                   Optimize. Optimizing compilation takes somewhat more time, and a lot more
                                          memory for a large function. 
(3)-O2:                                   Optimize even more. GCC performs nearly all supported optimizations that do
                                          not involve a space-speed tradeoff. As compared to ‘-O’, this option increases
                                          both compilation time and the performance of the generated code.
                                          ‘-O2’ turns on all optimization flags specified by ‘-O’.   
(4)-O3:                                   Optimize yet more.
(5)-Ofast:                                Disregard strict standards compliance. ‘-Ofast’ enables all ‘-O3’ optimizations.
                                          It also enables optimizations that are not valid for all standard-compliant programs.
                                          It turns on ‘-ffast-math’ and the Fortran-specific ‘-fstack-arrays’,
                                          unless ‘-fmax-stack-var-size’ is specified, and ‘-fno-protect-parens’.
(6)-Os:                                   Optimize for size. ‘-Os’ enables all ‘-O2’ optimizations except those that often
                                          increase code size.It also enables ‘-finline-functions’, causes the compiler to tune for code
                                          size rather than execution speed, and performs further optimizations designed
                                          to reduce code size.   
(7)-Og:                                   Optimize debugging experience. ‘-Og’ should be the optimization level of choice
                                          for the standard edit-compile-debug cycle, offering a reasonable level of optimization
                                          while maintaining fast compilation and a good debugging experience.
                                          It is a better choice than ‘-O0’ for producing debuggable code because some
                                          compiler passes that collect debug information are disabled at ‘-O0’. 
(8)-O:                                    Equivalent to '-O1'
优化选项的默认值是O0
         
         
         
         
         
         
